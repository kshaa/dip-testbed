# Related:
#   Play configuration: https://www.playframework.com/documentation/latest/ConfigFile
#   Akka configuration: https://doc.akka.io/docs/akka/current/general/configuration.html
#   Slick configuration: https://scala-slick.org/doc/3.1.0/database.html

# Application
diptestbed = {
  basePath = "/"
  title = "DIP Testbed"
  test.enabled = false
  test.name = null
  clusterized = true
}

# Play
play = {
  http.secret.key = "31imdCGyKb5IwITHhzlo"
  application.loader = diptestbed.web.DIPTestbedLoader
  akka.actor-system = "DIPTestbed"
  # CSRF checks required only if cookies are present
  # A lone Authorization header can bypass CSRF checks
  filters.csrf.header.protectHeaders = {
    "Cookie" = "*"
    "Authorization" = "nocheck"
  }
}

# Akka

## Akka default
akka = ${akkaCluster}

## Akka centralized
## Used in tests, because interop w/ OS sockets (which clusterization requires) is impure
akkaCentralized = {
  actor.provider = "local"
#   akka.http.server.idle-timeout = 15 minutes
#   akka.http.client.idle-timeout = 15 minutes
#   akka.http.host-connection-pool.client.idle-timeout = 15 minutes
}

## Akka clusterized
## Used in production, because clusters are the real deal
akkaCluster {
#   akka.http.server.idle-timeout = 15 minutes
#   akka.http.client.idle-timeout = 15 minutes
#   akka.http.host-connection-pool.client.idle-timeout = 15 minutes

  # Enable Akka's Publish/Subscribe extension
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]

  # Logs whole akka configuration
  # log-config-on-start = true

  # Workaround for NoClassDefFoundError: jdk.jfr.Event
  # Source: https://discuss.lightbend.com/t/problem-with-wildfly-and-akka-2-6-related-to-flight-recorder-jdk-jfr-event/7197
  java-flight-recorder.enabled = false

  # Akka cluster configuration
  actor.provider = "cluster"
  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      port = 2551
    }
  }
  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    seed-nodes = [ "akka://DIPTestbed@127.0.0.1:2551" ]
    min-nr-of-members = 1
  }
}

# Slick (database client)

## Slick default
slick.dbs.default = ${slick.dbs.defaultPostgres}

## Slick Postgres
## Used in production, because Postgres is cool
slick.dbs.defaultPostgres.profile = "slick.jdbc.PostgresProfile$"
slick.dbs.defaultPostgres.driver = "slick.driver.PostgresDriver$"
slick.dbs.defaultPostgres.db.driver = "org.postgresql.Driver"
slick.dbs.defaultPostgres.db.url = "jdbc:postgresql://127.0.0.1:5432/dip?currentSchema=public"
slick.dbs.defaultPostgres.db.user = "postgres"
slick.dbs.defaultPostgres.db.password = "postgres"
slick.dbs.defaultPostgres.db.numThreads = 100
slick.dbs.defaultPostgres.db.maxConnections = 100

## Slick H2
## Used in tests, because interop w/ OS sockets (which actual database connections require) is impure
slick.dbs.defaultH2.profile = "slick.jdbc.H2Profile$"
slick.dbs.defaultH2.driver = "slick.driver.H2Driver$"
slick.dbs.defaultH2.db.driver = "org.h2.Driver"
slick.dbs.defaultH2.db.url = "jdbc:h2:mem:play;DB_CLOSE_DELAY=-1;MODE=PostgreSQL"
slick.dbs.defaultH2.db.user = ""
slick.dbs.defaultH2.db.password = ""
slick.dbs.defaultH2.db.numThreads = 100
slick.dbs.defaultH2.db.maxConnections = 100

# Evolutions (Play database migrations)
play.evolutions.autoApply = true
play.evolutions.autoApplyDowns = true
